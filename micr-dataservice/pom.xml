<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <!--<parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.4.5</version>
        <relativePath/> &lt;!&ndash; lookup parent from repository &ndash;&gt;
    </parent>-->

    <parent>
        <groupId>com.bjpowernode</groupId>
        <artifactId>micr-parents</artifactId>
        <version>1.0.0</version>
        <relativePath>../micr-parents</relativePath>
    </parent>

    <artifactId>micr-dataservice</artifactId>

    <properties>
        <java.version>1.8</java.version>
    </properties>
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <!--micr-dataservice必然会用到实体类，因此引入micr-interface的依赖-->
        <dependency>
            <groupId>com.bjpowernode</groupId>
            <artifactId>micr-interface</artifactId>
            <version>1.0.0</version>
        </dependency>
        <!--micr-dataservice肯定需要工具类模块，因此引入工具类模块依赖-->
        <dependency>
            <groupId>com.bjpowernode</groupId>
            <artifactId>micr-common</artifactId>
            <version>1.0.0</version>
        </dependency>

        <!--引入dubbo的依赖-->
        <dependency>
            <groupId>org.apache.dubbo</groupId>
            <artifactId>dubbo-spring-boot-starter</artifactId>
        </dependency>

        <!--引入dubbo-dependencies-zookeeper的依赖-->
        <!--注意<type>pom</type>别忘记了-->
        <!--父模块已经屏蔽了slf4j-log4j12，那么子模块就无需屏蔽了-->
        <dependency>
            <groupId>org.apache.dubbo</groupId>
            <artifactId>dubbo-dependencies-zookeeper</artifactId>
            <type>pom</type>
        </dependency>

        <!--配置mybaits-->
        <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
        </dependency>

        <!--配置mysql连接驱动-->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>

    </dependencies>

    <build>
        <!--引入maven的逆向工程插件，因为是maven的逆向工程插件，因此能在maven中进行操作-->
        <plugins>
            <plugin>
                <groupId>org.mybatis.generator</groupId>
                <artifactId>mybatis-generator-maven-plugin</artifactId>
                <version>1.3.6</version>
                <configuration>
                    <configurationFile>GeneratorMapper.xml</configurationFile>
                    <verbose>true</verbose>
                    <overwrite>true</overwrite>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

</project>
